
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20220210

module MenhirBasics = struct
  
  exception Error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | WITH of (
# 14 "src/parser.mly"
       (Types.pre_info)
# 20 "src/parser.ml"
  )
    | WILDCARD of (
# 9 "src/parser.mly"
       (Types.pre_info)
# 25 "src/parser.ml"
  )
    | VAR of (
# 5 "src/parser.mly"
       (string Types.info)
# 30 "src/parser.ml"
  )
    | UNIT of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 35 "src/parser.ml"
  )
    | TVAR of (
# 6 "src/parser.mly"
       (string Types.info)
# 40 "src/parser.ml"
  )
    | TRUE of (
# 7 "src/parser.mly"
       (Types.pre_info)
# 45 "src/parser.ml"
  )
    | TO of (
# 15 "src/parser.mly"
       (Types.pre_info)
# 50 "src/parser.ml"
  )
    | THEN of (
# 12 "src/parser.mly"
       (Types.pre_info)
# 55 "src/parser.ml"
  )
    | SUB of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 60 "src/parser.ml"
  )
    | STRING of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 65 "src/parser.ml"
  )
    | STR of (
# 4 "src/parser.mly"
       (string Types.info)
# 70 "src/parser.ml"
  )
    | SPAWN of (
# 14 "src/parser.mly"
       (Types.pre_info)
# 75 "src/parser.ml"
  )
    | SEND of (
# 15 "src/parser.mly"
       (Types.pre_info)
# 80 "src/parser.ml"
  )
    | SEMICOLON of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 85 "src/parser.ml"
  )
    | SELF of (
# 20 "src/parser.mly"
       (Types.pre_info)
# 90 "src/parser.ml"
  )
    | RPAREN of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 95 "src/parser.ml"
  )
    | RETURN of (
# 17 "src/parser.mly"
       (Types.pre_info)
# 100 "src/parser.ml"
  )
    | REF of (
# 11 "src/parser.mly"
       (Types.pre_info)
# 105 "src/parser.ml"
  )
    | RECV of (
# 16 "src/parser.mly"
       (Types.pre_info)
# 110 "src/parser.ml"
  )
    | REC of (
# 9 "src/parser.mly"
       (Types.pre_info)
# 115 "src/parser.ml"
  )
    | RBRACK of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 120 "src/parser.ml"
  )
    | PROMISE of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 125 "src/parser.ml"
  )
    | PIPE of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 130 "src/parser.ml"
  )
    | OR of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 135 "src/parser.ml"
  )
    | NOT of (
# 11 "src/parser.mly"
       (Types.pre_info)
# 140 "src/parser.ml"
  )
    | NE of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 145 "src/parser.ml"
  )
    | MUL of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 150 "src/parser.ml"
  )
    | MOD of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 155 "src/parser.ml"
  )
    | MATCH of (
# 13 "src/parser.mly"
       (Types.pre_info)
# 160 "src/parser.ml"
  )
    | LT of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 165 "src/parser.ml"
  )
    | LPAREN of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 170 "src/parser.ml"
  )
    | LIST of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 175 "src/parser.ml"
  )
    | LET of (
# 9 "src/parser.mly"
       (Types.pre_info)
# 180 "src/parser.ml"
  )
    | LE of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 185 "src/parser.ml"
  )
    | LBRACK of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 190 "src/parser.ml"
  )
    | INT_LIT of (
# 3 "src/parser.mly"
       (int Types.info)
# 195 "src/parser.ml"
  )
    | INT of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 200 "src/parser.ml"
  )
    | INCLUDE of (
# 20 "src/parser.mly"
       (Types.pre_info)
# 205 "src/parser.ml"
  )
    | IN of (
# 9 "src/parser.mly"
       (Types.pre_info)
# 210 "src/parser.ml"
  )
    | IF of (
# 12 "src/parser.mly"
       (Types.pre_info)
# 215 "src/parser.ml"
  )
    | HANDLE of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 220 "src/parser.ml"
  )
    | GT of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 225 "src/parser.ml"
  )
    | GE of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 230 "src/parser.ml"
  )
    | FUN of (
# 8 "src/parser.mly"
       (Types.pre_info)
# 235 "src/parser.ml"
  )
    | FALSE of (
# 7 "src/parser.mly"
       (Types.pre_info)
# 240 "src/parser.ml"
  )
    | EQ of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 245 "src/parser.ml"
  )
    | EOF of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 250 "src/parser.ml"
  )
    | END of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 255 "src/parser.ml"
  )
    | ELSE of (
# 12 "src/parser.mly"
       (Types.pre_info)
# 260 "src/parser.ml"
  )
    | DIV of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 265 "src/parser.ml"
  )
    | DEREF of (
# 11 "src/parser.mly"
       (Types.pre_info)
# 270 "src/parser.ml"
  )
    | CONS of (
# 13 "src/parser.mly"
       (Types.pre_info)
# 275 "src/parser.ml"
  )
    | COMMA of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 280 "src/parser.ml"
  )
    | COLON of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 285 "src/parser.ml"
  )
    | CAT of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 290 "src/parser.ml"
  )
    | CASE of (
# 13 "src/parser.mly"
       (Types.pre_info)
# 295 "src/parser.ml"
  )
    | BOOL of (
# 19 "src/parser.mly"
       (Types.pre_info)
# 300 "src/parser.ml"
  )
    | BIND of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 305 "src/parser.ml"
  )
    | BEGIN of (
# 18 "src/parser.mly"
       (Types.pre_info)
# 310 "src/parser.ml"
  )
    | AWAIT of (
# 9 "src/parser.mly"
       (Types.pre_info)
# 315 "src/parser.ml"
  )
    | ASSIGN of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 320 "src/parser.ml"
  )
    | ARROW of (
# 8 "src/parser.mly"
       (Types.pre_info)
# 325 "src/parser.ml"
  )
    | AND of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 330 "src/parser.ml"
  )
    | ADD of (
# 10 "src/parser.mly"
       (Types.pre_info)
# 335 "src/parser.ml"
  )
  
end

include MenhirBasics

# 66 "src/parser.mly"
  
  open Types

  (** [fold_fun ps e] is the function [fun p1 -> ... -> fun pn -> e]. *)
  let fold_fun ps (e : expr info) : expr info =
    List.fold_right (fun p f -> dummy_info, Fun (p, f)) ps e

  let fold_fun_typ (tvs : var info list) (rt : gtyp info) : gtyp info =
    List.fold_right (fun (_,(_,t)) acc -> dummy_info, GFun (t,acc)) tvs rt

  (** Generalize type if function type, otherwise return unchanged. *)
  let gen_fun_typ (ft : gtyp info) : gtyp info =
    match snd ft with
    | GFun (gt, gt') -> (fst ft, GPoly (gt, gt'))
    | _ -> ft

  (** Generalize type if [pt] is function type and [e] is (function) value,
      otherwise return unchanged.

      Only generalizing the types of values is known as the "value restriction"
      in OCaml. This restriction is needed for soundness in the presence of
      references. For more details, see here:

      https://ocamlverse.github.io/content/weak_type_variables.html *)
  let gen_let_pat_typ (pt : var info) (e : expr info) : var info =
    let (i, (p, t)) = pt in
    match snd e with
    | Fun (_, _) -> (i, (p, gen_fun_typ t))
    | _ -> pt

  (** [defold_list es] desugars List [e1; ... ; en] to [Cons (e1, ... Cons (en, Nil))] *)
  let rec defold_list es =
    match es with
    | [] -> dummy_info, Nil
    | h::t -> dummy_info, Bop ((dummy_info, Cons), h, defold_list t)

  (** [defold_plist ps] desugars PList [p1; ... ; pn] to [PCons (p1, ... Cons (pn, Nil))] *)
  let rec defold_plist ps =
    match ps with
    | [] -> dummy_info, PNil
    | p::t -> dummy_info, PCons (p, defold_plist t)

  let (<+>) i1 i2 = {
    filename = if i1.filename = "" then i2.filename else i1.filename;
    start_lin = i1.start_lin;
    end_lin = i2.end_lin;
    start_col = i1.start_col;
    end_col = i2.end_col;
  }


# 394 "src/parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADD _ ->
          64
      | AND _ ->
          63
      | ARROW _ ->
          62
      | ASSIGN _ ->
          61
      | AWAIT _ ->
          60
      | BEGIN _ ->
          59
      | BIND _ ->
          58
      | BOOL _ ->
          57
      | CASE _ ->
          56
      | CAT _ ->
          55
      | COLON _ ->
          54
      | COMMA _ ->
          53
      | CONS _ ->
          52
      | DEREF _ ->
          51
      | DIV _ ->
          50
      | ELSE _ ->
          49
      | END _ ->
          48
      | EOF _ ->
          47
      | EQ _ ->
          46
      | FALSE _ ->
          45
      | FUN _ ->
          44
      | GE _ ->
          43
      | GT _ ->
          42
      | HANDLE _ ->
          41
      | IF _ ->
          40
      | IN _ ->
          39
      | INCLUDE _ ->
          38
      | INT _ ->
          37
      | INT_LIT _ ->
          36
      | LBRACK _ ->
          35
      | LE _ ->
          34
      | LET _ ->
          33
      | LIST _ ->
          32
      | LPAREN _ ->
          31
      | LT _ ->
          30
      | MATCH _ ->
          29
      | MOD _ ->
          28
      | MUL _ ->
          27
      | NE _ ->
          26
      | NOT _ ->
          25
      | OR _ ->
          24
      | PIPE _ ->
          23
      | PROMISE _ ->
          22
      | RBRACK _ ->
          21
      | REC _ ->
          20
      | RECV _ ->
          19
      | REF _ ->
          18
      | RETURN _ ->
          17
      | RPAREN _ ->
          16
      | SELF _ ->
          15
      | SEMICOLON _ ->
          14
      | SEND _ ->
          13
      | SPAWN _ ->
          12
      | STR _ ->
          11
      | STRING _ ->
          10
      | SUB _ ->
          9
      | THEN _ ->
          8
      | TO _ ->
          7
      | TRUE _ ->
          6
      | TVAR _ ->
          5
      | UNIT _ ->
          4
      | VAR _ ->
          3
      | WILDCARD _ ->
          2
      | WITH _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADD _v ->
          Obj.repr _v
      | AND _v ->
          Obj.repr _v
      | ARROW _v ->
          Obj.repr _v
      | ASSIGN _v ->
          Obj.repr _v
      | AWAIT _v ->
          Obj.repr _v
      | BEGIN _v ->
          Obj.repr _v
      | BIND _v ->
          Obj.repr _v
      | BOOL _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CAT _v ->
          Obj.repr _v
      | COLON _v ->
          Obj.repr _v
      | COMMA _v ->
          Obj.repr _v
      | CONS _v ->
          Obj.repr _v
      | DEREF _v ->
          Obj.repr _v
      | DIV _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | END _v ->
          Obj.repr _v
      | EOF _v ->
          Obj.repr _v
      | EQ _v ->
          Obj.repr _v
      | FALSE _v ->
          Obj.repr _v
      | FUN _v ->
          Obj.repr _v
      | GE _v ->
          Obj.repr _v
      | GT _v ->
          Obj.repr _v
      | HANDLE _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | IN _v ->
          Obj.repr _v
      | INCLUDE _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | INT_LIT _v ->
          Obj.repr _v
      | LBRACK _v ->
          Obj.repr _v
      | LE _v ->
          Obj.repr _v
      | LET _v ->
          Obj.repr _v
      | LIST _v ->
          Obj.repr _v
      | LPAREN _v ->
          Obj.repr _v
      | LT _v ->
          Obj.repr _v
      | MATCH _v ->
          Obj.repr _v
      | MOD _v ->
          Obj.repr _v
      | MUL _v ->
          Obj.repr _v
      | NE _v ->
          Obj.repr _v
      | NOT _v ->
          Obj.repr _v
      | OR _v ->
          Obj.repr _v
      | PIPE _v ->
          Obj.repr _v
      | PROMISE _v ->
          Obj.repr _v
      | RBRACK _v ->
          Obj.repr _v
      | REC _v ->
          Obj.repr _v
      | RECV _v ->
          Obj.repr _v
      | REF _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | RPAREN _v ->
          Obj.repr _v
      | SELF _v ->
          Obj.repr _v
      | SEMICOLON _v ->
          Obj.repr _v
      | SEND _v ->
          Obj.repr _v
      | SPAWN _v ->
          Obj.repr _v
      | STR _v ->
          Obj.repr _v
      | STRING _v ->
          Obj.repr _v
      | SUB _v ->
          Obj.repr _v
      | THEN _v ->
          Obj.repr _v
      | TO _v ->
          Obj.repr _v
      | TRUE _v ->
          Obj.repr _v
      | TVAR _v ->
          Obj.repr _v
      | UNIT _v ->
          Obj.repr _v
      | VAR _v ->
          Obj.repr _v
      | WILDCARD _v ->
          Obj.repr _v
      | WITH _v ->
          Obj.repr _v
  
  and default_reduction =
    (8, "\000\000<\001\000\000\000\000ef\000d\000\000c\000\000\000\000\000\000h\000\000\000\000bg\000\000\000\000\005K\007\000\n\011\000\006\000\t\bB\000\000SJ\000\000\000N\000\000\000L\000I\000\000UZX\000VYW\000`[\\\000\000]\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000/\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007\000\000\000\000\000\000\000l@\000k\000\000Q\000\000\000\000\000H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000j\000\000\000\000\000\000\000\021\000D5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\000F\000>\000\002\000T")
  
  and error =
    (65, "\000\000\000\000B\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\001\146\128@\b\192 \000\000\000\000\000\000\000\b(\000$\186\224\138\177\024 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\151\\\017V#\004\006\000\000\000\000\000\000\000\000\001%\215\004U\136\193\001\128\146\235\130*\196`\128\192\000\000\000\000\000\000\000\000$\186\224\138\177\024 0\018]pEX\140\016\024\t.\184\"\172F\b\012\004\151\\\017V#\004\006\002K\174\b\171\017\130\003\001%\223\004U\136\193\001\128\000\000\000\000\000\000\000\000\201@ \004`\016\000\000\000\000\000\000\000\004\020\000\018]pEX\140\016\024\t\b\130\000\140\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001%\215\004U\136\193\001\128\146\235\130*\196`\128\192\000\000\000\004\000\000\000\000d\160\000\0020\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201B\000\004`\016\000\000\000\000\000\000\000\000\000\0002P\004\001\024\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\128\001\146\128\000\b\192 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002P\000\001\024\004\000\000\000\001B\000\000\000\007\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\001\146\128\000\b\192 \000\000\000\002\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128\001\132\000\000 \136\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024@\000\002\b\128\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020B\016\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024@\000\002\b\128\000\128\000\000\162\016\128\002\000\002\000\000\000\000\000\000\000\000\003\b\000\000A\016\000\016\000\000\020B\016\000@\000@\000\n!\b\000 \000 \000\000\000\000\000\000\000\016Iu\193\021b0@`$\186\224\138\177\024 02P\000\001\024\004\000\000\025(@\000\140\002\000\000\000\000\000\000\000\000\003\128\000\000\000\000\000\000@\000\001%\215\004U\136\193\001\128\000\000\000\000\000\000\000\000\001\b\006\232\132\200\164\150$\186\224\138\177\024 0A\194\129\186a3\237\165\137.\184\"\172F\b\012\016p\160n\152L\251ibK\174\b\171\017\130\003\000\000\000\000\000\000\000\000\002\158\156\r\219\201\191m\172\000\000\000\000\000\000\000\000$\186\224\138\177\024 0A\194\129\186a3\237\165\137.\184\"\172F\b\012\016p\160n\152L\251ibK\174\b\171\017\130\003\004\028(\027\166\019>\218X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150$\186\224\138\177\024 0A\194\129\186a3\237\165\137.\184\"\172F\b\012\016p\160n\152L\251ibK\174\b\171\017\130\003\004\028(\027\166\019>\218X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150$\186\224\138\177\024 0A\194\129\186a3\237\165\137.\184\"\172F\b\012\016p\160n\152L\251ibK\174\b\171\017\130\003\004\028(\027\166\019>\218X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150$\186\224\138\177\024 0A\194\129\186a3\237\165\137.\184\"\172F\b\012\016p\160n\152L\251hbK\174\b\171\017\130\003\004\028(\027\166\019>\218X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150$\186\224\138\177\024 0A\194\129\186a3\237\165\128\000\000\000\000\001\000\000\004\151\\\017V#\004\006\000\b@7D&E$\177%\215\004U\136\193\001\130\014\020\r\211\t\159m,\000\000\000\000\000\000\000\000\131\133\003t\194g\219K\000\194\001\186 2)%\137.\184\"\172F\b\012\000\016\128n\136\012\154IbK\174\b\171\017\130\003\004\028(\027\166\019>\218X\002\016\r\209\001\149I,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\004\132\193\000F\001\000\004\002B \000#\000\128\002\000\000\000\000\000\000\000\000\000\002\016\r\209\t\145I,Iu\193\021b0@`\131\133\003t\194g\219K\000\000\000\001\000\000\n\000\000\000\000\000\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\194\000\000\016D\000\004\000\000\001\016\132\000\016\000\016Iu\193\021b0@`\000\132\003tBdRK\018]pEX\140\016\024 \225@\2210\153\246\210\196\000\000\000\000\000\000\000\000\000\000\000 \000\000@\000\194\000\000\016D\000\004\000\000\001\016\132\000\016\000\016Iu\193\021b0@`\000\132\003tBdRK\018]pEX\140\016\024 \225@\2210\153\246\210\192\000\000\000\000\000\000\128\001\132\000\000 \136\000\b\000\000\002!\b\000 \000 \146\235\130*\196`\128\192\001\b\006\232\132\200\164\150$\186\224\138\177\024 0A\194\129\186a3\237\165\153(@\000\140\002\000\000\000\000\000\000\000\000\130\128\002K\174\b\171\017\130\003\000\004 \027\162\019\"\146X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150\000\000\000\000\000\004\000\000\018]pEX\140\016\024\000!\000\221\016\153\020\146\196\151\\\017V#\004\006\b8P7L&}\180\176\000\000\000\000\000 \000\000\146\235\130*\196`\128\192\001\b\006\232\132\200\164\150$\186\224\138\177\024 0A\194\129\186a3\237\165\128!@\221\016\025\022\146\192\000\000\000\000\000\000\000\002K\174\b\171\017\130\003\000\004(\027\162\003\"\146X\000\000\000\000\000\000\000\001\001\b\006\232\128\200\164\150\000\000\000\000\000\000\001\0002P\000\001\024\004\000\000\000\000\000\000\000\000\004\001\004\151\\\017V#\004\006\000\b@7D\006U4\176\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \225@\2210\153\246\210\208p\160n\152L\251ih8P7L&}\180\176\020 \027\162\003\"\146X\146\235\130*\196`\128\193\007\n\006\233\132\207\182\150\128\132\003t@dRK\018]pEX\140\016\024 \225@\2210\153\246\210\208p\160n\152L\251i`\b@7L\006e$\176\000\000\000\016\000\000\160\000\000\000\000\000\000\000\016\0000\128\000\004\017\000\001\000\000\000D!\000\004\000\004\018]pEX\140\016\024\000!\000\2210\025\148\146\196\000\000\000\000\000\000\000\000\000\000\000 \000\000@\000\194\000\000\016D\000\004\000\000\001\016\132\000\016\000\016Iu\193\021b0@`\000\132\003t\192fRK\000\000\000\000\000\000\002\000\006\016\000\000\130 \000 \000\000\b\132 \000\128\000\130K\174\b\171\017\130\003\000\004 \027\166\0032\146Y\146\132\000\b\192 \000\000\000\000\000\000\000\b(\000$\186\224\138\177\024 0\000B\001\186`3)%\128\000\000\000\000\001\000\000\004\151\\\017V#\004\006\000\b@7L\006e$\176\000\000\000\000\000 \000\000\146\235\130*\196`\128\192\001\b\006\233\128\204\164\150\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\000\000\000\000\000\000\000\000\000\000\146\235\130*\196`\128\192\000\000\000\000\000\000\000\000\000\132\003t@fRK\000\000\000\000\000\000\000\000\000")
  
  and start =
    2
  
  and action =
    ((16, "\000T\000\020\000\000\000\000\0008\000\134\000W\016L\000\000\000\000\016L\000\000\016L\016L\000\000\016L\016L\016L\016L\016L\016L\000\000\000\250\000\031\016L\000\003\000\000\000\000\016L\016L\000=\001n\000\000\000\000\000\000\0008\000\000\000\000\001n\000\000\020P\000\000\000\000\000\000\000\005\001n\000\000\000\000\001n\019\194\000^\000\000\000I\001n\000\025\000\000\000\134\000\000\000I\016\152\000\000\000\000\000\000\016\152\000\000\000\000\000\000\003F\000\000\000\000\000\000\016\152\018\176\000\000\016\152\019\004\019j\0006\016L\016L\002\202\001n\000I\000X\016L\000\000\016\152\016L\000t\016L\000\232\016L\000\000\000\003\000\000\016L\001\\\016L\001\208\016L\002D\016L\002\184\016L\003,\016L\003\160\016L\004\020\016L\004\136\016L\004\252\016L\005p\016L\005\228\016L\006X\016L\006\204\016L\015\220\016L\007@\016L\007\180\016L\b(\000^\016L\016\242\016L\b\156\000\000\t\016\016\152\016L\016\152\016L\t\132\016\242\000\000\000\000\000\150\000\000\016L\000\003\000\000\017F\016L\t\248\0002\000=\000\000\000Z\016\152\020J\016L\017\154\016L\nl\000\212\000P\016\152\020P\016L\017\238\016L\n\224\000z\016\152\020h\016L\018B\016L\011T\001\226\000\166\016L\018\150\016L\011\200\000\148\016L\018\234\016L\012<\000\160\016L\019>\016L\012\176\016\152\000\000\016L\019\164\000\000\016\152\000)\001n\000\019\016L\016\152\000\180\000\000\000)\000\000\000\000\r$\r\152\014\012\017F\016L\014\128\020\004\016L\014\244\015h\016\152\0002\000\174\016\152\020n\016L\016\242\001\"\000\128\016\152\020\146\016L\017F\000\194\016\152\020\172\016L\017\154\002V\001\026\016L\017\238\000\212\016L\018B\000\214\016L\018\150\000\214\000\000\000\200\000\000\000T\000\000\016L\000\000\018\234\000\000"), (16, "\000\233\000~\000\"\000\030\000\222\000&\000\233\000\233\000\233\000\017\000.\000\017\000\182\000\233\000:\000\233\000\194\000\214\000\238\001E\000\249\000\n\000\233\000\233\001\025\000\233\000\233\000\233\001\t\000\233\000R\000b\000\233\000\233\000f\000j\003\"\000\017\000\233\000\017\000\194\000\233\000\233\000\194\000n\000\233\000\233\000\233\000\233\000\233\000\194\000\233\000\233\003*\000\233\000\233\000~\000\233\000r\000\137\000\233\000\022\000\233\000\233\000\146\000\137\000\137\000\137\000\206\000\026\003r\000~\000\137\000\138\000\137\000\241\000\142\001)\000\150\001)\000\006\000\137\000\137\000\230\000\137\001f\001~\003\138\000\137\001:\001R\000\137\000\137\002\n\002\146\000~\002F\000\137\003\182\002r\000\137\000\137\000\162\000\166\000\137\000\137\000\137\000\137\001\134\002\142\000\137\000\137\000\170\001n\000\137\002\174\000\137\000\141\003\146\000\137\002\226\000\137\000\137\000\141\000\141\000\141\002\246\000^\002b\002\206\000\141\000\138\000\141\000\022\000\142\000\021\000\150\000\021\0036\000\141\000\141\003z\000\141\000\141\000\141\002\138\000\141\001\017\003\142\000\141\000\141\003\166\003\202\003\214\003\227\000\141\002\198\000\000\000\141\000\141\000\162\000\166\000\141\000\141\000\141\000\141\000\141\000\000\000\141\000\141\000\170\001n\000\141\000\000\000\141\000\149\000\000\000\141\000\000\000\141\000\141\000\149\000\149\000\149\000\000\000\130\000\134\003\190\000\149\000\138\000\149\000\000\000\142\000\021\000\150\000\021\000\000\000\149\000\149\000\158\000\149\000\149\000\149\000\000\000\149\000\000\000\000\000\149\000\149\000\000\000\000\000\000\000\000\000\149\000\154\000\000\000\149\000\149\000\162\000\166\000\149\000\149\000\149\000\149\000\149\000\000\000\149\000\149\000\170\001n\000\149\000\000\000\149\000\145\000\000\000\149\000\000\000\149\000\149\000\145\000\145\000\145\000\000\000\130\000\134\000\000\000\145\000\138\000\145\000\000\000\142\000\000\000\150\000\000\000\000\000\145\000\145\002\202\000\145\000\145\000\145\000\000\000\145\000\000\000\000\000\145\000\145\000\000\000\000\000\000\000\000\000\145\000\154\000\000\000\145\000\145\000\162\000\166\000\145\000\145\000\145\000\145\000\145\000\000\000\145\000\145\000\170\001n\000\145\000\000\000\145\000\129\000\000\000\145\000\000\000\145\000\145\000\129\000\129\001^\000\000\000\130\000\134\000\000\000\129\000\138\000\129\000\000\000\142\000\000\000\150\000\000\000\000\000\129\001\150\003\186\001\158\001f\001~\000\000\001\166\000\000\000\000\000\129\001\182\000\000\000\000\000\000\000\000\000\129\000\154\000\000\001\190\001\198\000\162\000\166\001\206\000\129\000\129\000\129\001\134\000\000\001\222\000\129\000\170\001n\000\129\000\000\000\129\000\157\000\000\001\230\000\000\001\214\001\174\000\157\000\157\001^\000\000\000\130\000\134\000\000\000\157\000\138\000\157\000\000\000\142\000\000\000\150\000\000\000\000\000\157\000\157\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\157\001\182\000\000\000\000\000\000\000\000\000\157\001F\000\000\001\190\001\198\000\162\000\166\001\206\000\157\000\157\000\157\001\134\000\000\000\157\000\157\000\170\001n\000\157\000\000\000\157\000\181\000\000\000\157\000\000\001\214\001\174\000\181\000\181\001^\000\000\000\000\000\000\000\000\000\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\181\000\181\000\000\000\181\001f\001~\001\018\001\166\001\022\000\000\000\181\001\182\001\026\000\000\000\000\000\000\000\181\001\030\000\000\001\190\001\198\000\000\001&\000\181\000\181\000\181\000\181\001\134\000\000\000\181\000\181\000\000\001n\000\181\000\000\000\181\000\161\000\000\000\181\000\000\000\181\001\174\000\161\000\161\001^\000\000\000\000\000\000\000\000\000\161\000\000\000\161\001*\000\000\000\000\000\000\000\000\000\000\000\161\000\161\000\000\000\161\001f\001~\000\000\000\161\000\000\000\000\000\161\000\161\000\000\000\000\000\000\000\000\000\161\000\000\000\000\000\161\000\161\000\000\000\000\000\161\000\161\000\161\000\161\001\134\000\000\000\161\000\161\000\000\001n\000\161\000\000\000\161\000\133\000\000\000\161\000\000\000\161\001\174\000\133\000\133\000\133\000\000\000\000\000\000\000\000\000\133\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\133\000\000\000\133\001f\001~\000\000\000\133\000\000\000\000\000\133\000\133\000\000\000\000\000\000\000\000\000\133\000\000\000\000\000\133\000\133\000\000\000\000\000\133\000\133\000\133\000\133\001\134\000\000\000\133\000\133\000\000\001n\000\133\000\000\000\133\000\165\000\000\000\133\000\000\000\133\000\133\000\165\000\165\001^\000\000\000\000\000\000\000\000\000\165\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\000\000\165\001f\001~\000\000\000\165\000\000\000\000\000\165\000\165\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\165\000\165\000\000\000\000\000\165\000\165\000\165\000\165\001\134\000\000\000\165\000\165\000\000\001n\000\165\000\000\000\165\000\169\000\000\000\165\000\000\000\165\001\174\000\169\000\169\001^\000\000\000\000\000\000\000\000\000\169\000\000\000\169\000\000\000\000\000\000\000\000\000\000\000\000\000\169\000\169\000\000\000\169\001f\001~\000\000\000\169\000\000\000\000\000\169\000\169\000\000\000\000\000\000\000\000\000\169\000\000\000\000\000\169\000\169\000\000\000\000\000\169\000\169\000\169\000\169\001\134\000\000\000\169\000\169\000\000\001n\000\169\000\000\000\169\000\173\000\000\000\169\000\000\000\169\001\174\000\173\000\173\001^\000\000\000\000\000\000\000\000\000\173\000\000\000\173\000\000\000\000\000\000\000\000\000\000\000\000\000\173\000\173\000\000\000\173\001f\001~\000\000\000\173\000\000\000\000\000\173\000\173\000\000\000\000\000\000\000\000\000\173\000\000\000\000\000\173\000\173\000\000\000\000\000\173\000\173\000\173\000\173\001\134\000\000\000\173\000\173\000\000\001n\000\173\000\000\000\173\000\177\000\000\000\173\000\000\000\173\001\174\000\177\000\177\001^\000\000\000\000\000\000\000\000\000\177\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\000\000\177\000\177\000\000\000\177\001f\001~\000\000\001\166\000\000\000\000\000\177\001\182\000\000\000\000\000\000\000\000\000\177\000\000\000\000\001\190\001\198\000\000\000\000\000\177\000\177\000\177\000\177\001\134\000\000\000\177\000\177\000\000\001n\000\177\000\000\000\177\000\153\000\000\000\177\000\000\000\177\001\174\000\153\000\153\001^\000\000\000\000\000\000\000\000\000\153\000\000\000\153\000\000\000\000\000\000\000\000\000\000\000\000\000\153\000\153\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\153\001\182\000\000\000\000\000\000\000\000\000\153\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\153\000\153\000\153\001\134\000\000\000\153\000\153\000\000\001n\000\153\000\000\000\153\000\193\000\000\000\153\000\000\000\153\001\174\000\193\000\193\001^\000\000\000\000\000\000\000\000\000\193\000\000\000\193\000\000\000\000\000\000\000\000\000\000\000\000\000\193\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\193\001\182\000\000\000\000\000\000\000\000\000\193\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\193\000\193\000\193\001\134\000\000\001\222\000\193\000\000\001n\000\193\000\000\000\193\000\189\000\000\000\193\000\000\001\214\001\174\000\189\000\189\001^\000\000\000\000\000\000\000\000\001\142\000\000\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\189\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\189\001\182\000\000\000\000\000\000\000\000\000\189\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\189\000\189\000\189\001\134\000\000\001\222\000\189\000\000\001n\000\189\000\000\000\189\000m\000\000\001\230\000\000\001\214\001\174\000m\000m\001^\000\000\000\000\000\000\000\000\001\142\000\000\000m\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000m\001\182\000\000\000\000\000\000\000\000\000m\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000m\000m\000m\001\134\000\000\001\222\000m\000\000\001n\000m\000\000\001\254\000\201\000\000\001\230\000\000\001\214\001\174\000\201\000\201\001^\000\000\000\000\000\000\000\000\001\142\000\000\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\201\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\201\001\182\000\000\000\000\000\000\000\000\000\201\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\201\000\201\000\201\001\134\000\000\001\222\000\201\000\000\001n\000\201\000\000\000\201\000q\000\000\001\230\000\000\001\214\001\174\000q\000q\001^\000\000\000\000\000\000\000\000\001\142\000\000\000q\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000q\001\182\000\000\000\000\000\000\000\000\000q\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000q\000q\000q\001\134\000\000\001\222\000q\000\000\001n\000q\000\000\001\254\000U\000\000\001\230\000\000\001\214\001\174\000U\000U\001^\000\000\000\000\000\000\000\000\001\142\000\000\000U\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000U\001\182\000\000\000\000\000\000\000\000\000U\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000U\000U\000U\001\134\000\000\001\222\000U\000\000\001n\000U\000\000\001\254\000M\000\000\001\230\000\000\001\214\001\174\000M\000M\001^\000\000\000\000\000\000\000\000\001\142\000\000\000M\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000M\001\182\000\000\000\000\000\000\000\000\000M\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000M\000M\000M\001\134\000\000\001\222\000M\000\000\001n\000M\000\000\001\254\000]\000\000\001\230\000\000\001\214\001\174\000]\000]\001^\000\000\000\000\000\000\000\000\001\142\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000]\001\182\000\000\000\000\000\000\000\000\000]\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000]\000]\000]\001\134\000\000\001\222\000]\000\000\001n\000]\000\000\001\254\000i\000\000\001\230\000\000\001\214\001\174\000i\000i\001^\000\000\000\000\000\000\000\000\001\142\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000i\001\182\000\000\000\000\000\000\000\000\000i\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000i\000i\000i\001\134\000\000\001\222\000i\000\000\001n\000i\000\000\001\254\000\225\000\000\001\230\000\000\001\214\001\174\000\225\000\225\001^\000\000\000\000\000\000\000\000\001\142\000\000\000\225\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\225\001\182\000\000\000\000\000\000\000\000\000\225\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\225\000\225\000\225\001\134\000\000\001\222\000\225\000\000\001n\000\225\000\000\001\254\000\229\000\000\001\230\000\000\001\214\001\174\000\229\000\229\001^\000\000\000\000\000\000\000\000\001\142\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\229\001\182\000\000\000\000\000\000\000\000\000\229\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\229\000\229\000\229\001\134\000\000\001\222\000\229\000\000\001n\000\229\000\000\001\254\000Y\000\000\001\230\000\000\001\214\001\174\000Y\000Y\001^\000\000\000\000\000\000\000\000\001\142\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000Y\001\182\000\000\000\000\000\000\000\000\000Y\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000Y\000Y\000Y\001\134\000\000\001\222\000Y\000\000\001n\000Y\000\000\001\254\000a\000\000\001\230\000\000\001\214\001\174\000a\000a\001^\000\000\000\000\000\000\000\000\001\142\000\000\000a\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000a\001\182\000\000\000\000\000\000\000\000\000a\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000a\000a\000a\001\134\000\000\001\222\000a\000\000\001n\000a\000\000\001\254\000e\000\000\001\230\000\000\001\214\001\174\000e\000e\001^\000\000\000\000\000\000\000\000\001\142\000\000\000e\000\000\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000e\001\182\000\000\000\000\000\000\000\000\000e\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000e\000e\000e\001\134\000\000\001\222\000e\000\000\001n\000e\000\000\001\254\000y\000\000\001\230\000\000\001\214\001\174\000y\000y\001^\000\000\000\000\000\000\000\000\000y\000\000\000y\000\000\000\000\000\000\000\000\000\000\000\000\000y\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000y\001\182\000\000\000\000\000\000\000\000\000y\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000y\000y\000y\001\134\000\000\001\222\000y\000\000\001n\000y\000\000\000y\000\213\000\000\000y\000\000\001\214\001\174\000\213\000\213\000\213\000\000\000\000\000\000\000\000\000\213\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\213\000\213\000\000\000\213\000\213\000\213\000\000\000\213\000\000\000\000\000\213\000\213\000\000\000\000\000\000\000\000\000\213\000\000\000\000\000\213\000\213\000\000\000\000\000\213\000\213\000\213\000\213\000\213\000\000\000\213\000\213\000\000\001n\000\213\000\000\000\213\000\221\000\000\000\213\000\000\000\213\000\213\000\221\000\221\001^\000\000\000\000\000\000\000\000\000\221\000\000\000\221\000\000\000\000\000\000\000\000\000\000\000\000\000\221\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\221\001\182\000\000\000\000\000\000\000\000\000\221\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\221\000\221\000\221\001\134\000\000\001\222\000\221\000\000\001n\000\221\000\000\000\221\000u\000\000\000\221\000\000\001\214\001\174\000u\000u\001^\000\000\000\000\000\000\000\000\000u\000\000\000u\000\000\000\000\000\000\000\000\000\000\000\000\000u\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000u\001\182\000\000\000\000\000\000\000\000\000u\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000u\000u\000u\001\134\000\000\001\222\000u\000\000\001n\000u\000\000\000u\000}\000\000\000u\000\000\001\214\001\174\000}\000}\001^\000\000\000\000\000\000\000\000\000}\000\000\000}\000\000\000\000\000\000\000\000\000\000\000\000\000}\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000}\001\182\000\000\000\000\000\000\000\000\000}\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000}\000}\000}\001\134\000\000\001\222\000}\000\000\001n\000}\000\000\000}\000\205\000\000\000}\000\000\001\214\001\174\000\205\000\205\000\205\000\000\000\000\000\000\000\000\000\205\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\000\000\205\000\205\000\000\000\205\001f\001~\000\000\000\205\000\000\000\000\000\205\000\205\000\000\000\000\000\000\000\000\000\205\000\000\000\000\000\205\000\205\000\000\000\000\000\205\000\205\000\205\000\205\001\134\000\000\000\205\000\205\000\000\001n\000\205\000\000\000\205\000\197\000\000\000\205\000\000\000\205\000\205\000\197\000\197\001^\000\000\000\000\000\000\000\000\000\197\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\197\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000\197\001\182\000\000\000\000\000\000\000\000\000\197\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\197\000\197\000\197\001\134\000\000\001\222\000\197\000\000\001n\000\197\000\000\000\197\000\"\000\000\000\000\000&\001\214\001\174\000*\000\000\000.\0002\0006\002N\000:\000V\000>\000B\000F\000\000\001=\000\000\000\000\000\000\000J\000\000\000\000\000\000\000N\000\000\000R\000\000\000Z\000\000\000f\000j\000\000\000\000\003\030\000v\000\000\000\242\000\246\000z\000n\002&\001^\000\250\000\000\000\000\001>\001\142\000\000\003\n\000\000\000\000\000\000\000\000\000r\001B\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\254\000\000\0005\001\182\000\000\000\000\001\002\000\000\001\246\000\000\001\006\001\190\001\198\000\000\000\000\001\206\0005\000-\002.\001\134\000\000\001\222\003\014\001^\001n\000-\001\n\001\254\001\142\000\000\001\230\000\000\001\214\001\174\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000A\001\182\000\000\000\000\000\000\000\000\002\018\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000A\002:\003V\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\000\000\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000E\001\182\000\000\000\000\000\000\000\000\002Z\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000E\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\000\000\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\000I\001\182\000\000\000\000\000\000\000\000\002\130\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000I\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\000\000\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\0001\001\182\000\000\000\000\000\000\000\000\002\162\000\000\000\000\001\190\001\198\000\000\000\000\001\206\0001\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\000\000\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\0009\001\182\000\000\000\000\000\000\000\000\002\190\000\000\000\000\001\190\001\198\000\000\000\000\001\206\0009\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\000\000\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\001u\001\166\001\022\000\000\000=\001\182\001\026\000\000\000\000\000\000\002\214\001u\000\000\001\190\001\198\000\000\001&\001\206\000=\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\001u\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\001y\001\166\001\022\000\000\001u\001\182\001\026\000\000\000\000\000\000\002\234\001\030\000\000\001\190\001\198\000\000\001&\001\206\004\003\000\000\000\000\001\134\001^\001\222\000\000\000\000\001n\001\142\000\000\001\254\001y\000\000\001\230\000\000\001\214\001\174\001\238\001\150\000\000\001\158\001f\001~\000\000\001\166\000\000\000\000\001*\001\182\000\000\000\000\000\000\001\129\002\254\001\022\000\000\001\190\001\198\001\026\000\000\001\206\000\000\000\000\001\030\001\134\000\000\001\222\000\000\001&\001n\000\000\000\000\001\254\000\000\001^\001\230\000\000\001\214\001\174\001\142\000\000\003\022\001\129\000\000\000\000\000\000\000\000\000\000\001\238\001\150\000\000\001\158\001f\001~\0011\001\166\0011\000\000\001*\001\182\000\000\0011\000\000\000\000\000\000\000\000\000\000\001\190\001\198\000\000\000\000\001\206\000\000\000\000\003b\001\134\000\000\001\222\000\000\000\000\001n\000\000\001^\001\254\000\000\000\000\001\230\001\142\001\214\001\174\000\000\000\000\000\194\0011\0011\000\000\001\238\001\150\000\000\001\158\001f\001~\0011\001\166\000\000\000\000\000\000\001\182\000\000\000\000\000\000\000\000\000\000\000\130\000\134\001\190\001\198\000\138\000\000\001\206\000\142\000\000\000\150\001\134\000\000\001\222\001\022\000\000\001n\001\022\001\026\001\254\001\001\001\026\001\230\001\030\001\214\001\174\001\030\000\000\001&\001\022\000\154\001&\001\022\001\026\000\162\000\166\001\026\000\000\001\030\000\000\000\000\001\030\002z\001&\000\170\002\154\001&\000\000\000\000\000\000\001\022\000\000\000\000\000\000\001\026\000\000\000\000\002\182\001*\001\030\003\130\001*\000\000\001\022\001&\000\000\000\000\001\026\000\000\000\000\000\000\000\000\001\030\001*\000\000\000\000\001*\001&\003\154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\174\000\000\000\000\001*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001*"))
  
  and lhs =
    (8, "\001\000\022\022\021\021\021\021\021\021\021\020\019\019\019\019\019\019\019\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\017\016\016\015\015\014\014\r\r\012\012\011\011\n\t\t\t\t\t\b\007\007\006\006\005\004\004\004\004\004\004\004\004\004\004\004\004\003\002\002\002\002\002\002\002\002\002\002\002")
  
  and goto =
    ((16, "\0000\000\000\000\000\000\000\000\015\000\007\000\000\000(\000\000\000\000\000:\000\000\000@\000D\000\000\000F\000R\000T\000V\000X\000j\000\000\000\003\000\000\000p\000\016\000\000\000\000\000\130\000\132\000\019\000\140\000\000\000\000\000\000\000\000\000\000\000\000\001\250\000\000\000\nn\000\000\001\012\000\000\001\016\000\000\001\022\000\000\001.\000\000\001:\000\000\001<\000\000\000\000\001@\000\000\001F\000\000\000\000\000\000\000\000\001J\000\000\001L\000\000\000\000\000\000\000\000\000\000\000\000\000\200\001H\000\000\000\000\001X\000\000\000\015\000\028\000\000\000\000\000\208\000\000\001^\000\000\001v\000\000\000\000\000L\000\212\000\000\001z\000\000\001|\000\000\000\000\000\254\000\000\001\136\000\000\001\138\000\000\000\146\000\000\001\140\000\000\001\142\000\000\000\000\001\152\000\000\001\166\000\000\000\000\001\186\000\000\001\188\000\000\000\000\000\000\001\190\000\000\000\000\000\000\000\174\002\006\000\000\001\200\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\001\204\000\000\000\000\000\000\0012\000\000\001\004\000\000\001\214\000\000\000\000\001r\001\016\000\000\001\216\000\000\000\000\001\020\000\000\001\238\000\000\000\146\000\000\001\250\000\000\000\000\001\252\000\000\000\000\002\006\000\000\000\000\000\000\001~\000\000\001\166\000\000\000\022\000\000\000\000\000\000"), (16, "\000\242\000N\000\184\000\154\000\156\000\248\000;\000\245\000;\000\189\000V\000,\000\250\000V\000-\000\144\000\255\000M\0000\0003\0000\000T\000V\000\145\000\154\000\155\0000\000;\000\130\001\000\000\147\000V\000\004\000^\000V\000D\000V\000V\000\220\0000\000\005\000\252\000^\000V\000V\000V\000V\000\219\000\154\000\171\000\216\000^\000\213\000\212\000^\000V\000^\000^\000V\000\211\000\210\000\209\000\199\000^\000^\000^\000^\000V\000V\000V\000V\000\194\000I\0009\000\150\000^\0009\000/\000^\000;\000-\000V\000S\000\142\000\137\000\136\000\135\000^\000^\000^\000^\0000\0000\000V\0000\000V\000V\000W\000V\000L\000\205\000^\000_\000V\000V\000V\000V\000\207\000\158\000Y\000\166\000[\000]\000^\000a\000^\000^\000V\000^\000c\000e\000g\000i\000^\000^\000^\000^\000V\000V\000V\000V\000\173\000\208\000k\000\224\000V\000V\000^\000V\000\207\000\230\000V\000\235\000m\000o\000q\000s\000^\000^\000^\000^\000u\000w\000V\000y\000^\000^\000{\000^\000V\000V\000^\000V\000\154\000\222\000V\000V\000V\000V\000}\000\000\000\149\000\000\000^\000V\000\127\000\129\000V\000\132\000^\000^\000\134\000^\000\139\000\141\000^\000\147\000^\000^\000V\000\152\000V\000V\000\160\000^\000\154\000\233\000^\000V\000V\000V\000V\000\000\000\251\000\000\000\162\000V\000\168\000\170\000^\000\250\000^\000^\000V\000\175\000\177\000\181\000\183\000^\000^\000^\000^\000\186\000V\000V\000V\000^\000\253\000\252\000\188\000V\000V\000V\000^\000\000\000\000\000\000\000V\000V\000\191\000\193\000\197\000\000\000^\000^\000^\000\204\000\215\000\218\000V\000^\000^\000^\000\226\000\232\000V\000V\000^\000^\000\000\000\000\000V\0005\000\000\000\000\000\237\0002\0007\000\202\000^\000\000\000\241\000\244\000\000\0000\000^\000^\000\247\0000\0000\0000\000^"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let v : (Types.expr Types.info) = Obj.magic v in
        let a : (Types.expr Types.info) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_v_ in
        let _v : (Types.expr Types.info) = 
# 201 "src/parser.mly"
                  ( (fst a) <+> (fst v), App (a, v) )
# 710 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (Types.expr Types.info) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v : (Types.expr Types.info) = 
# 202 "src/parser.mly"
                  ( v )
# 735 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 756 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.pat Types.info) = 
# 175 "src/parser.mly"
                      ( i, PWild )
# 764 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 791 "src/parser.ml"
        ) = Obj.magic r in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 796 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.pat Types.info) = 
# 176 "src/parser.mly"
                      ( l <+> r, PUnit )
# 804 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 7 "src/parser.mly"
       (Types.pre_info)
# 825 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.pat Types.info) = 
# 177 "src/parser.mly"
                      ( i, PBool (i, true) )
# 833 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 7 "src/parser.mly"
       (Types.pre_info)
# 854 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.pat Types.info) = 
# 178 "src/parser.mly"
                      ( i, PBool (i, false) )
# 862 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 3 "src/parser.mly"
       (int Types.info)
# 883 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.pat Types.info) = 
# 179 "src/parser.mly"
                      ( fst i, PInt i )
# 891 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = u;
            MenhirLib.EngineTypes.startp = _startpos_u_;
            MenhirLib.EngineTypes.endp = _endpos_u_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 3 "src/parser.mly"
       (int Types.info)
# 918 "src/parser.ml"
        ) = Obj.magic i in
        let u : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 923 "src/parser.ml"
        ) = Obj.magic u in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.pat Types.info) = 
# 180 "src/parser.mly"
                      ( u <+> fst i, PInt (fst i, -(snd i)) )
# 931 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 4 "src/parser.mly"
       (string Types.info)
# 952 "src/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Types.pat Types.info) = 
# 181 "src/parser.mly"
                      ( fst s, PString s )
# 960 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 8 "src/parser.mly"
       (Types.pre_info)
# 1000 "src/parser.ml"
        ) = Obj.magic _3 in
        let p : (Types.pat Types.info) = Obj.magic p in
        let _1 : (
# 13 "src/parser.mly"
       (Types.pre_info)
# 1006 "src/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.pat Types.info * Types.expr Types.info) = 
# 198 "src/parser.mly"
                           ( (p, e) )
# 1014 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = r;
              MenhirLib.EngineTypes.startp = _startpos_r_;
              MenhirLib.EngineTypes.endp = _endpos_r_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _4 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1060 "src/parser.ml"
        ) = Obj.magic _4 in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1065 "src/parser.ml"
        ) = Obj.magic r in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1070 "src/parser.ml"
        ) = Obj.magic l in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1075 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 131 "src/parser.mly"
    ( let pos = l <+> r in
      i <+> (fst e), DLet ((pos, ((pos, PUnit), (pos, GUnit))), e) )
# 1084 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1124 "src/parser.ml"
        ) = Obj.magic _3 in
        let w : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1129 "src/parser.ml"
        ) = Obj.magic w in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1134 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 134 "src/parser.mly"
    ( i <+> (fst e), DLet ((w, ((w, PWild), (w, GBot))), e) )
# 1142 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1182 "src/parser.ml"
        ) = Obj.magic _3 in
        let p : (Types.var Types.info) = Obj.magic p in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1188 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 135 "src/parser.mly"
                                ( i <+> (fst e), DLet (gen_let_pat_typ p e, e) )
# 1196 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1236 "src/parser.ml"
        ) = Obj.magic _3 in
        let p : (Types.var Types.info) = Obj.magic p in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1242 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 136 "src/parser.mly"
                                ( i <+> (fst e), DLet (gen_let_pat_typ p e, e) )
# 1250 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tvs;
                  MenhirLib.EngineTypes.startp = _startpos_tvs_;
                  MenhirLib.EngineTypes.endp = _endpos_tvs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = f;
                    MenhirLib.EngineTypes.startp = _startpos_f_;
                    MenhirLib.EngineTypes.endp = _endpos_f_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _6 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1308 "src/parser.ml"
        ) = Obj.magic _6 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _4 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1314 "src/parser.ml"
        ) = Obj.magic _4 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 1320 "src/parser.ml"
        ) = Obj.magic f in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1325 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 138 "src/parser.mly"
    ( i <+> (fst e), DLet ((fst f, ((fst f, PVar f), gen_fun_typ (fold_fun_typ tvs t))), fold_fun tvs e) )
# 1333 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = f;
                  MenhirLib.EngineTypes.startp = _startpos_f_;
                  MenhirLib.EngineTypes.endp = _endpos_f_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _6 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1391 "src/parser.ml"
        ) = Obj.magic _6 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _4 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1397 "src/parser.ml"
        ) = Obj.magic _4 in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 1402 "src/parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1407 "src/parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1412 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 140 "src/parser.mly"
    ( i <+> (fst e), DLetRec (((fst f) <+> (fst t), ((fst f, PVar f), gen_fun_typ t)),e) )
# 1420 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tvs;
                  MenhirLib.EngineTypes.startp = _startpos_tvs_;
                  MenhirLib.EngineTypes.endp = _endpos_tvs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = f;
                    MenhirLib.EngineTypes.startp = _startpos_f_;
                    MenhirLib.EngineTypes.endp = _endpos_f_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = i;
                        MenhirLib.EngineTypes.startp = _startpos_i_;
                        MenhirLib.EngineTypes.endp = _endpos_i_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _7 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1484 "src/parser.ml"
        ) = Obj.magic _7 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _5 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1490 "src/parser.ml"
        ) = Obj.magic _5 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 1496 "src/parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1501 "src/parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1506 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.defn Types.info) = 
# 142 "src/parser.mly"
    ( i <+> (fst e), DLetRec (((fst f) <+> (fst t), ((fst f, PVar f), gen_fun_typ (fold_fun_typ tvs t))), fold_fun tvs e) )
# 1514 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e3;
          MenhirLib.EngineTypes.startp = _startpos_e3_;
          MenhirLib.EngineTypes.endp = _endpos_e3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e2;
              MenhirLib.EngineTypes.startp = _startpos_e2_;
              MenhirLib.EngineTypes.endp = _endpos_e2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e3 : (Types.expr Types.info) = Obj.magic e3 in
        let _5 : (
# 12 "src/parser.mly"
       (Types.pre_info)
# 1566 "src/parser.ml"
        ) = Obj.magic _5 in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 12 "src/parser.mly"
       (Types.pre_info)
# 1572 "src/parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 12 "src/parser.mly"
       (Types.pre_info)
# 1578 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e3_ in
        let _v : (Types.expr Types.info) = 
# 145 "src/parser.mly"
                                                    ( i <+> (fst e3), IfElse (e1, e2, e3) )
# 1586 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e1;
                MenhirLib.EngineTypes.startp = _startpos_e1_;
                MenhirLib.EngineTypes.endp = _endpos_e1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = m;
                  MenhirLib.EngineTypes.startp = _startpos_m_;
                  MenhirLib.EngineTypes.endp = _endpos_m_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1631 "src/parser.ml"
        ) = Obj.magic e in
        let cs : ((Types.pat Types.info * Types.expr Types.info) list) = Obj.magic cs in
        let _3 : (
# 14 "src/parser.mly"
       (Types.pre_info)
# 1637 "src/parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let m : (
# 13 "src/parser.mly"
       (Types.pre_info)
# 1643 "src/parser.ml"
        ) = Obj.magic m in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 146 "src/parser.mly"
                                                    ( m <+> e, Match (e1, cs) )
# 1651 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = tv;
              MenhirLib.EngineTypes.startp = _startpos_tv_;
              MenhirLib.EngineTypes.endp = _endpos_tv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = f;
                MenhirLib.EngineTypes.startp = _startpos_f_;
                MenhirLib.EngineTypes.endp = _endpos_f_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 8 "src/parser.mly"
       (Types.pre_info)
# 1691 "src/parser.ml"
        ) = Obj.magic _3 in
        let tv : (Types.var Types.info) = Obj.magic tv in
        let f : (
# 8 "src/parser.mly"
       (Types.pre_info)
# 1697 "src/parser.ml"
        ) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 147 "src/parser.mly"
                                                    ( f <+> (fst e), Fun (tv, e) )
# 1705 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = r;
                  MenhirLib.EngineTypes.startp = _startpos_r_;
                  MenhirLib.EngineTypes.endp = _endpos_r_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = l;
                    MenhirLib.EngineTypes.startp = _startpos_l_;
                    MenhirLib.EngineTypes.endp = _endpos_l_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _6 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1763 "src/parser.ml"
        ) = Obj.magic _6 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _4 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1769 "src/parser.ml"
        ) = Obj.magic _4 in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1774 "src/parser.ml"
        ) = Obj.magic r in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 1779 "src/parser.ml"
        ) = Obj.magic l in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1784 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 149 "src/parser.mly"
    ( let pos = l <+> r in
      (i <+> (fst e2), Let ((pos, ((pos, PUnit), (pos, GUnit))), e1, e2)) )
# 1793 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = w;
                  MenhirLib.EngineTypes.startp = _startpos_w_;
                  MenhirLib.EngineTypes.endp = _endpos_w_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1845 "src/parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1851 "src/parser.ml"
        ) = Obj.magic _3 in
        let w : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1856 "src/parser.ml"
        ) = Obj.magic w in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1861 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 152 "src/parser.mly"
    ( (i <+> (fst e2), Let ((w, ((w, PWild), (w, GBot))), e1, e2)) )
# 1869 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1921 "src/parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1927 "src/parser.ml"
        ) = Obj.magic _3 in
        let tv : (Types.var Types.info) = Obj.magic tv in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1933 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 153 "src/parser.mly"
                                                    ( i <+> (fst e2), Let (tv, e1, e2) )
# 1941 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 1993 "src/parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 1999 "src/parser.ml"
        ) = Obj.magic _3 in
        let tv : (Types.var Types.info) = Obj.magic tv in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2005 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 154 "src/parser.mly"
                                                    ( i <+> (fst e2), Let (tv, e1, e2) )
# 2013 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = tvs;
                      MenhirLib.EngineTypes.startp = _startpos_tvs_;
                      MenhirLib.EngineTypes.endp = _endpos_tvs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = f;
                        MenhirLib.EngineTypes.startp = _startpos_f_;
                        MenhirLib.EngineTypes.endp = _endpos_f_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = i;
                          MenhirLib.EngineTypes.startp = _startpos_i_;
                          MenhirLib.EngineTypes.endp = _endpos_i_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _8 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2083 "src/parser.ml"
        ) = Obj.magic _8 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _6 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2089 "src/parser.ml"
        ) = Obj.magic _6 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _4 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 2095 "src/parser.ml"
        ) = Obj.magic _4 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 2101 "src/parser.ml"
        ) = Obj.magic f in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2106 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 156 "src/parser.mly"
    ( i <+> (fst e2), 
      Let (((fst f) <+> (fst t), ((fst f, PVar f), fold_fun_typ tvs t)),
          fold_fun tvs e1, e2) )
# 2116 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2168 "src/parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2174 "src/parser.ml"
        ) = Obj.magic _3 in
        let tv : (Types.var Types.info) = Obj.magic tv in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2180 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 159 "src/parser.mly"
                                                    ( i <+> (fst e2), Await (tv, e1, e2) )
# 2188 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2240 "src/parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2246 "src/parser.ml"
        ) = Obj.magic _3 in
        let tv : (Types.var Types.info) = Obj.magic tv in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 2252 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 160 "src/parser.mly"
                                                    ( i <+> (fst e2), Await (tv, e1, e2) )
# 2260 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 15 "src/parser.mly"
       (Types.pre_info)
# 2300 "src/parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 15 "src/parser.mly"
       (Types.pre_info)
# 2306 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 161 "src/parser.mly"
                                                    ( i <+> (fst e2), Send (e1, e2) )
# 2314 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 16 "src/parser.mly"
       (Types.pre_info)
# 2342 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 162 "src/parser.mly"
                                                    ( i <+> (fst e), Recv e )
# 2350 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 14 "src/parser.mly"
       (Types.pre_info)
# 2390 "src/parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 14 "src/parser.mly"
       (Types.pre_info)
# 2396 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 163 "src/parser.mly"
                                                    ( i <+> (fst e2), Spawn (e1, e2) )
# 2404 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _2 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 2438 "src/parser.ml"
        ) = Obj.magic _2 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 164 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Seq (e1, e2) )
# 2447 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2481 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 233 "src/parser.mly"
           ( i, Ast.Add )
# 2491 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2496 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2531 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 234 "src/parser.mly"
           ( i, Ast.Sub )
# 2541 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2546 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2581 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 235 "src/parser.mly"
           ( i, Ast.Mul )
# 2591 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2596 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2631 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 236 "src/parser.mly"
           ( i, Ast.Div )
# 2641 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2646 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2681 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 237 "src/parser.mly"
           ( i, Ast.Mod )
# 2691 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2696 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2731 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 238 "src/parser.mly"
           ( i, Ast.And )
# 2741 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2746 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2781 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 239 "src/parser.mly"
           ( i, Ast.Or )
# 2791 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2796 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2831 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 240 "src/parser.mly"
           ( i, Ast.Lt )
# 2841 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2846 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2881 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 241 "src/parser.mly"
           ( i, Ast.Le )
# 2891 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2896 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2931 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 242 "src/parser.mly"
           ( i, Ast.Gt )
# 2941 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2946 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 2981 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 243 "src/parser.mly"
           ( i, Ast.Ge )
# 2991 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2996 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3031 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 244 "src/parser.mly"
           ( i, Ast.Eq )
# 3041 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3046 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3081 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 245 "src/parser.mly"
           ( i, Ast.Ne )
# 3091 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3096 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3131 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 246 "src/parser.mly"
           ( i, Ast.Cat )
# 3141 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3146 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3181 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 247 "src/parser.mly"
           ( i, Ast.Pipe )
# 3191 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3196 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 13 "src/parser.mly"
       (Types.pre_info)
# 3231 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 248 "src/parser.mly"
           ( i, Ast.Cons )
# 3241 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3246 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3281 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 249 "src/parser.mly"
           ( i, Ast.Assign )
# 3291 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3296 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3331 "src/parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let op = 
# 250 "src/parser.mly"
           ( i, Ast.Bind )
# 3341 "src/parser.ml"
           in
          (
# 165 "src/parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3346 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3375 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v =
          let op = 
# 253 "src/parser.mly"
          ( i, Ast.Neg )
# 3384 "src/parser.ml"
           in
          (
# 166 "src/parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3389 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 11 "src/parser.mly"
       (Types.pre_info)
# 3418 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v =
          let op = 
# 254 "src/parser.mly"
          ( i, Ast.Not )
# 3427 "src/parser.ml"
           in
          (
# 166 "src/parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3432 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 11 "src/parser.mly"
       (Types.pre_info)
# 3461 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v =
          let op = 
# 255 "src/parser.mly"
          ( i, Ast.Ref )
# 3470 "src/parser.ml"
           in
          (
# 166 "src/parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3475 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 11 "src/parser.mly"
       (Types.pre_info)
# 3504 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v =
          let op = 
# 256 "src/parser.mly"
          ( i, Ast.Deref )
# 3513 "src/parser.ml"
           in
          (
# 166 "src/parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3518 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 17 "src/parser.mly"
       (Types.pre_info)
# 3547 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 167 "src/parser.mly"
                                                    ( i <+> (fst e), Return e )
# 3555 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = f;
                      MenhirLib.EngineTypes.startp = _startpos_f_;
                      MenhirLib.EngineTypes.endp = _endpos_f_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = i;
                          MenhirLib.EngineTypes.startp = _startpos_i_;
                          MenhirLib.EngineTypes.endp = _endpos_i_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _8 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3625 "src/parser.ml"
        ) = Obj.magic _8 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _6 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3631 "src/parser.ml"
        ) = Obj.magic _6 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _4 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 3637 "src/parser.ml"
        ) = Obj.magic _4 in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 3642 "src/parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3647 "src/parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3652 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 169 "src/parser.mly"
    ( i <+> (fst e2), LetRec (((fst f) <+> (fst t), ((fst f, PVar f),t)), e1, e2) )
# 3660 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = tvs;
                      MenhirLib.EngineTypes.startp = _startpos_tvs_;
                      MenhirLib.EngineTypes.endp = _endpos_tvs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = f;
                        MenhirLib.EngineTypes.startp = _startpos_f_;
                        MenhirLib.EngineTypes.endp = _endpos_f_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = i;
                            MenhirLib.EngineTypes.startp = _startpos_i_;
                            MenhirLib.EngineTypes.endp = _endpos_i_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _9 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3736 "src/parser.ml"
        ) = Obj.magic _9 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _7 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 3742 "src/parser.ml"
        ) = Obj.magic _7 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _5 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 3748 "src/parser.ml"
        ) = Obj.magic _5 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "src/parser.mly"
       (string Types.info)
# 3754 "src/parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3759 "src/parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 9 "src/parser.mly"
       (Types.pre_info)
# 3764 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 171 "src/parser.mly"
    ( i <+> (fst e2), LetRec (((fst f) <+> (fst t), ((fst f, PVar f),fold_fun_typ tvs t)), fold_fun tvs e1, e2) )
# 3772 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let a : (Types.expr Types.info) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_a_ in
        let _v : (Types.expr Types.info) = 
# 172 "src/parser.mly"
                                                  ( a )
# 3797 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (
# 4 "src/parser.mly"
       (string Types.info)
# 3824 "src/parser.ml"
        ) = Obj.magic s in
        let _1 : (
# 20 "src/parser.mly"
       (Types.pre_info)
# 3829 "src/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : (string Types.info) = 
# 127 "src/parser.mly"
                  ( s )
# 3837 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Types.info list) = 
# 208 "<standard.mly>"
    ( [] )
# 3855 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Types.info list) = Obj.magic xs in
        let x : (string Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Types.info list) = 
# 210 "<standard.mly>"
    ( x :: xs )
# 3887 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Types.expr Types.info list) = 
# 139 "<standard.mly>"
    ( [] )
# 3905 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.expr Types.info list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.expr Types.info list) = 
# 141 "<standard.mly>"
    ( x )
# 3930 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Types.pat Types.info list) = 
# 139 "<standard.mly>"
    ( [] )
# 3948 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.pat Types.info list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.pat Types.info list) = 
# 141 "<standard.mly>"
    ( x )
# 3973 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.pat Types.info * Types.expr Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Types.pat Types.info * Types.expr Types.info) list) = 
# 218 "<standard.mly>"
    ( [ x ] )
# 3998 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Types.pat Types.info * Types.expr Types.info) list) = Obj.magic xs in
        let x : (Types.pat Types.info * Types.expr Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Types.pat Types.info * Types.expr Types.info) list) = 
# 220 "<standard.mly>"
    ( x :: xs )
# 4030 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.defn Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.defn Types.info list) = 
# 218 "<standard.mly>"
    ( [ x ] )
# 4055 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Types.defn Types.info list) = Obj.magic xs in
        let x : (Types.defn Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.defn Types.info list) = 
# 220 "<standard.mly>"
    ( x :: xs )
# 4087 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.var Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.var Types.info list) = 
# 218 "<standard.mly>"
    ( [ x ] )
# 4112 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Types.var Types.info list) = Obj.magic xs in
        let x : (Types.var Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.var Types.info list) = 
# 220 "<standard.mly>"
    ( x :: xs )
# 4144 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4177 "src/parser.ml"
        ) = Obj.magic _3 in
        let p : (Types.var Types.info) = Obj.magic p in
        let _1 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4183 "src/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Types.var Types.info) = 
# 195 "src/parser.mly"
                              ( p )
# 4191 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : (Types.pat Types.info) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : (Types.pat Types.info) = 
# 184 "src/parser.mly"
                                                      ( b )
# 4216 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 5 "src/parser.mly"
       (string Types.info)
# 4237 "src/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Types.pat Types.info) = 
# 185 "src/parser.mly"
                                                      ( fst s, PVar s )
# 4245 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p2;
            MenhirLib.EngineTypes.startp = _startpos_p2_;
            MenhirLib.EngineTypes.endp = _endpos_p2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = p1;
                MenhirLib.EngineTypes.startp = _startpos_p1_;
                MenhirLib.EngineTypes.endp = _endpos_p1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4290 "src/parser.ml"
        ) = Obj.magic r in
        let p2 : (Types.pat Types.info) = Obj.magic p2 in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4296 "src/parser.ml"
        ) = Obj.magic _3 in
        let p1 : (Types.pat Types.info) = Obj.magic p1 in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4302 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.pat Types.info) = 
# 186 "src/parser.mly"
                                                      ( l <+> r, PPair (p1, p2) )
# 4310 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p2;
          MenhirLib.EngineTypes.startp = _startpos_p2_;
          MenhirLib.EngineTypes.endp = _endpos_p2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p1;
              MenhirLib.EngineTypes.startp = _startpos_p1_;
              MenhirLib.EngineTypes.endp = _endpos_p1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p2 : (Types.pat Types.info) = Obj.magic p2 in
        let _2 : (
# 13 "src/parser.mly"
       (Types.pre_info)
# 4344 "src/parser.ml"
        ) = Obj.magic _2 in
        let p1 : (Types.pat Types.info) = Obj.magic p1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p1_ in
        let _endpos = _endpos_p2_ in
        let _v : (Types.pat Types.info) = 
# 187 "src/parser.mly"
                                                      ( (fst p1) <+> (fst p2), PCons (p1, p2) )
# 4353 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4386 "src/parser.ml"
        ) = Obj.magic _3 in
        let xs : (Types.pat Types.info list) = Obj.magic xs in
        let _1 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4392 "src/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l = 
# 229 "<standard.mly>"
    ( xs )
# 4401 "src/parser.ml"
           in
          (
# 188 "src/parser.mly"
                                                      ( defold_plist l )
# 4406 "src/parser.ml"
           : (Types.pat Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ds;
            MenhirLib.EngineTypes.startp = _startpos_ds_;
            MenhirLib.EngineTypes.endp = _endpos_ds_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = is;
              MenhirLib.EngineTypes.startp = _startpos_is_;
              MenhirLib.EngineTypes.endp = _endpos_is_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4440 "src/parser.ml"
        ) = Obj.magic _3 in
        let ds : (Types.defn Types.info list) = Obj.magic ds in
        let is : (string Types.info list) = Obj.magic is in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_is_ in
        let _endpos = _endpos__3_ in
        let _v : (Types.prog) = 
# 121 "src/parser.mly"
                          ( is,ds )
# 4450 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.expr Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.expr Types.info list) = 
# 238 "<standard.mly>"
    ( [ x ] )
# 4475 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Types.expr Types.info list) = Obj.magic xs in
        let _2 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4509 "src/parser.ml"
        ) = Obj.magic _2 in
        let x : (Types.expr Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.expr Types.info list) = 
# 240 "<standard.mly>"
    ( x :: xs )
# 4518 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.pat Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.pat Types.info list) = 
# 238 "<standard.mly>"
    ( [ x ] )
# 4543 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Types.pat Types.info list) = Obj.magic xs in
        let _2 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4577 "src/parser.ml"
        ) = Obj.magic _2 in
        let x : (Types.pat Types.info) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.pat Types.info list) = 
# 240 "<standard.mly>"
    ( x :: xs )
# 4586 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 4613 "src/parser.ml"
        ) = Obj.magic _2 in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (Types.expr Types.info) = 
# 124 "src/parser.mly"
              ( e )
# 4622 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4643 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 219 "src/parser.mly"
                        ( i, GUnit )
# 4651 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4672 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 220 "src/parser.mly"
                        ( i, GInt )
# 4680 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4701 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 221 "src/parser.mly"
                        ( i, GBool )
# 4709 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4730 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 222 "src/parser.mly"
                        ( i, GString )
# 4738 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4759 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 223 "src/parser.mly"
                        ( i, GHandle )
# 4767 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 6 "src/parser.mly"
       (string Types.info)
# 4788 "src/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Types.gtyp Types.info) = 
# 224 "src/parser.mly"
                                  ( fst s, GTVar s )
# 4796 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 11 "src/parser.mly"
       (Types.pre_info)
# 4823 "src/parser.ml"
        ) = Obj.magic i in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 225 "src/parser.mly"
                        ( (fst t) <+> i, GRef t )
# 4832 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4859 "src/parser.ml"
        ) = Obj.magic i in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 226 "src/parser.mly"
                        ( (fst t) <+> i, GPromise t)
# 4868 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 19 "src/parser.mly"
       (Types.pre_info)
# 4895 "src/parser.ml"
        ) = Obj.magic i in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.gtyp Types.info) = 
# 227 "src/parser.mly"
                        ( (fst t) <+> i, GList t )
# 4904 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (Types.gtyp Types.info) = Obj.magic t2 in
        let _2 : (
# 10 "src/parser.mly"
       (Types.pre_info)
# 4938 "src/parser.ml"
        ) = Obj.magic _2 in
        let t1 : (Types.gtyp Types.info) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (Types.gtyp Types.info) = 
# 228 "src/parser.mly"
                        ( (fst t1) <+> (fst t2), GProd (t1, t2) )
# 4947 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (Types.gtyp Types.info) = Obj.magic t2 in
        let _2 : (
# 8 "src/parser.mly"
       (Types.pre_info)
# 4981 "src/parser.ml"
        ) = Obj.magic _2 in
        let t1 : (Types.gtyp Types.info) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (Types.gtyp Types.info) = 
# 229 "src/parser.mly"
                        ( (fst t1) <+> (fst t2), GFun (t1, t2) )
# 4990 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5023 "src/parser.ml"
        ) = Obj.magic _3 in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _1 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5029 "src/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Types.gtyp Types.info) = 
# 230 "src/parser.mly"
                        ( t )
# 5037 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (Types.gtyp Types.info) = Obj.magic t in
        let _2 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5071 "src/parser.ml"
        ) = Obj.magic _2 in
        let p : (Types.pat Types.info) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_t_ in
        let _v : (Types.var Types.info) = 
# 192 "src/parser.mly"
                      ( (fst p) <+> (fst t), (p, t) )
# 5080 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 3 "src/parser.mly"
       (int Types.info)
# 5101 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.expr Types.info) = 
# 205 "src/parser.mly"
                                                        ( fst i, Int i )
# 5109 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 20 "src/parser.mly"
       (Types.pre_info)
# 5130 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.expr Types.info) = 
# 206 "src/parser.mly"
                                                        ( i, Self )
# 5138 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 4 "src/parser.mly"
       (string Types.info)
# 5159 "src/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Types.expr Types.info) = 
# 207 "src/parser.mly"
                                                        ( fst s, String s )
# 5167 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 5 "src/parser.mly"
       (string Types.info)
# 5188 "src/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Types.expr Types.info) = 
# 208 "src/parser.mly"
                                                        ( fst s, Var s )
# 5196 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 7 "src/parser.mly"
       (Types.pre_info)
# 5217 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.expr Types.info) = 
# 209 "src/parser.mly"
                                                        ( i, Bool (i, true) )
# 5225 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 7 "src/parser.mly"
       (Types.pre_info)
# 5246 "src/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Types.expr Types.info) = 
# 210 "src/parser.mly"
                                                        ( i, Bool (i, false) )
# 5254 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5281 "src/parser.ml"
        ) = Obj.magic r in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5286 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.expr Types.info) = 
# 211 "src/parser.mly"
                                                        ( l <+> r, Unit )
# 5294 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5327 "src/parser.ml"
        ) = Obj.magic r in
        let e : (Types.expr Types.info) = Obj.magic e in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5333 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.expr Types.info) = 
# 212 "src/parser.mly"
                                                        ( l <+> r, snd e )
# 5341 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e2;
            MenhirLib.EngineTypes.startp = _startpos_e2_;
            MenhirLib.EngineTypes.endp = _endpos_e2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e1;
                MenhirLib.EngineTypes.startp = _startpos_e1_;
                MenhirLib.EngineTypes.endp = _endpos_e1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5386 "src/parser.ml"
        ) = Obj.magic r in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5392 "src/parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5398 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.expr Types.info) = 
# 213 "src/parser.mly"
                                                        ( l <+> r, Pair (e1, e2) )
# 5406 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5439 "src/parser.ml"
        ) = Obj.magic r in
        let xs : (Types.expr Types.info list) = Obj.magic xs in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5445 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let ps = 
# 229 "<standard.mly>"
    ( xs )
# 5454 "src/parser.ml"
           in
          (
# 214 "src/parser.mly"
                                                        ( l <+> r, snd (defold_list ps) )
# 5459 "src/parser.ml"
           : (Types.expr Types.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5493 "src/parser.ml"
        ) = Obj.magic r in
        let e : (Types.expr Types.info) = Obj.magic e in
        let l : (
# 18 "src/parser.mly"
       (Types.pre_info)
# 5499 "src/parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Types.expr Types.info) = 
# 215 "src/parser.mly"
                                                        ( l <+> r, snd e )
# 5507 "src/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let top_expr =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 253 lexer lexbuf) : (Types.expr Types.info))

and program =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (Types.prog))

module Incremental = struct
  
  let top_expr =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 253 initial_position) : (Types.expr Types.info) MenhirInterpreter.checkpoint)
  
  and program =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (Types.prog) MenhirInterpreter.checkpoint)
  
end
